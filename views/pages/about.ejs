<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Albums</title>
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="styles.css">
  <style>
    body {
      font-family: 'Montserrat', sans-serif;
    }
  </style>
</head>

<body>
  <div class="content">
    <div class="navigation">
      <ul>
        <% for (let i = 0; i < pages_count; i++) { %>
          <li><a href="http://localhost:5000/albums?offset=<%= i*limit %>""><%= i+1 %></a></li>
        <% } %>
      </ul>
      <ul>
        <li></li>
      </ul>
    </div>
    <ul>
      <% names.forEach(album=> { %>
        <li>

          <img src="<%= album.picture %>" />
          <p>
            <span>
              <%= album.artist %>
            </span> -
            <span>
              <a target="_blank" href="<%= album.link %>"><%= album.name %></a>
            </span>
          </p>
          <div class="tracks">
            Tracks:
            <ul class="tracks-list">
              <% album.tracks.forEach(track=> { %>
                <li>
                  <p data-id="<%= track.id %>" class="track" style="cursor: pointer">
                    <%= track.name %>
                  </p>
                </li>
                <% }) %>
  
            </ul>
          </div>
        </li>
        <% }) %>
    </ul>
  </div>
  <div class="player-controls">
    <button class="play">PLAY</button>
    <button class="pause">PAUSE</button>
    <button class="volumeMinus">-</button>
    <button class="volumePlus">+</button>
    <button class="seek">seek</button>
  </div>

  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  <script>
    window.onSpotifyWebPlaybackSDKReady = () => {
      const token = '<%= access_token %>';
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token); }
      });

      // Error handling
      player.addListener('initialization_error', ({ message }) => { console.error(message); });
      player.addListener('authentication_error', ({ message }) => { console.error(message); });
      player.addListener('account_error', ({ message }) => { console.error(message); });
      player.addListener('playback_error', ({ message }) => { console.error(message); });

      // Playback status updates
      player.addListener('player_state_changed', state => { console.log(state); });

      // Ready
      player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);
        // play(device_id);

        document.querySelector('.play').addEventListener("click", (e) => {
          player.resume();
        });

        document.querySelectorAll('.track').forEach(el => {
          el.addEventListener("click", (e) => {
            play(device_id, e.target.dataset.id, player);
          });
        });


        document.querySelector('.pause').addEventListener("click", () => {
          pause();
        });


      });



      // Not Ready
      player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
      });

      // Connect to the player!
      player.connect();

      document.querySelector('.volumeMinus').addEventListener('click', async () => {
        const currentVolume = await player.getVolume();
        if (currentVolume < 0.1) {
          console.log(currentVolume);
          return;
        }

        await player.setVolume(currentVolume - 0.1);
        console.log(currentVolume);
      });

      document.querySelector('.volumePlus').addEventListener('click', async () => {
        const currentVolume = await player.getVolume();
        if (currentVolume > 0.9) {
          console.log(currentVolume);
          return;
        }

        await player.setVolume(currentVolume + 0.1);
        console.log(currentVolume);
      });

      document.querySelector('.seek').addEventListener('click', async () => {
        const currentState = await player.getCurrentState();
        const currentPosition = currentState.position;
        player.seek(currentPosition + 10 * 1000);
      })
    };



    function play(device_id, track_id, player) {
      const token = '<%= access_token %>';
      player.getVolume().then(volume => console.log('vlume' + volume));
      let url = 'https://api.spotify.com/v1/me/player/play';
      if (device_id !== undefined) {
        url += `?device_id=${device_id}`;
      }
      $.ajax({
        url,
        type: "PUT",
        data: `{"uris": ["spotify:track:${track_id}"]}`,
        beforeSend: function (xhr) { xhr.setRequestHeader('Authorization', 'Bearer ' + token); },
        success: function (data) {
          // console.log(data)
        }
      });
    }

    function pause() {
      const token = '<%= access_token %>';
      $.ajax({
        url: "https://api.spotify.com/v1/me/player/pause",
        type: "PUT",
        data: '{"uris": ["spotify:track:2dCbaTDqGaVUMBxzWxTuHj"]}',
        beforeSend: function (xhr) { xhr.setRequestHeader('Authorization', 'Bearer ' + token); },
        success: function (data) {
          console.log(data)
        }
      });
    }

    document.querySelectorAll('.tracks').forEach(el => el.addEventListener('click', e => {
      console.log('klek');
      // e.style.display = 'block';
      console.log(e.children);
    }))
    
    
  </script>
</body>

</html>